{"version":3,"sources":["logo.svg","title.js","entry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","Entry","props","state","Salutation","Welcome","In","Name","GetIn","bind","GetOut","this","setState","alert","event","target","value","type","name","onChange","handleChange","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,4GCW5BC,MARf,WACI,OACI,6BACI,kD,mCCwDGC,E,kDA3DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,WAAY,YACZC,QAAS,uBACTC,IAAI,EACJC,KAAM,IAGV,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAVA,E,oDAiBU,WAApBE,KAAKR,MAAMI,KACXI,KAAKC,SAAS,CACVN,IAAI,IAGRO,MAAM,+C,+BAMVF,KAAKC,SAAS,CACVN,IAAI,M,mCAICQ,GACTH,KAAKC,SAAS,CAACL,KAAMO,EAAMC,OAAOC,U,+BAIlC,OAAsB,IAAlBL,KAAKR,MAAMG,GAEP,6BACI,4BAAKK,KAAKR,MAAMC,YAChB,2BAAOa,KAAK,OAAOC,KAAK,OACxBF,MAAOL,KAAKR,MAAMI,KAClBY,SAAUR,KAAKS,aAAaX,KAAKE,QACjC,4BAAQU,QAASV,KAAKH,MAAMC,KAAKE,OAAjC,WAKJ,6BACI,4BAAKA,KAAKR,MAAME,SAChB,4BAAQgB,QAASV,KAAKD,OAAOD,KAAKE,OAAlC,c,GArDAW,IAAMC,WCiBXC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac241d57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport styled from 'styled-components'\n\nfunction Title() {\n    return (\n        <div>\n            <h1>ALTXORRAREN BILA</h1>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react'\n\nclass Entry extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            Salutation: 'Nor zara?',\n            Welcome: 'Ongi etorri, Junkal!',\n            In: false,\n            Name: ''\n        };\n\n        this.GetIn = this.GetIn.bind(this);\n        this.GetOut = this.GetOut.bind(this);\n\n    }\n\n    GetIn() {\n\n        //Correct name\n        if (this.state.Name === 'Junkal'){\n            this.setState({\n                In: true       \n            });\n        } else {\n            alert('Zoaz etxera. Zuretzat ez dago ezer hemen.')\n\n        }\n    }\n\n    GetOut() {\n        this.setState({\n            In: false \n        });\n    }\n\n    handleChange(event){\n        this.setState({Name: event.target.value})\n    }\n\n    render() {\n        if (this.state.In === false) {\n            return(\n                <div>\n                    <h2>{this.state.Salutation}</h2>\n                    <input type='text' name='name' \n                    value={this.state.Name} \n                    onChange={this.handleChange.bind(this)} />\n                    <button onClick={this.GetIn.bind(this)}> naiz.</button>\n                </div>\n            );\n        } else {\n            return(\n                <div>\n                    <h2>{this.state.Welcome}</h2>\n                    <button onClick={this.GetOut.bind(this)}>Agur.</button>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Entry;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Title from './title.js'\nimport Entry from './entry.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Title/>\n        <Entry/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}